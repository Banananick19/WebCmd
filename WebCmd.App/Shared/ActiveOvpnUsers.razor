@using WebCmd.Lib
<div class="list-group list-group-numbered">
    <div class="input-group flex-nowrap w-100">
        <input type="text" placeholder="Поиск..." @oninput=@(ProcessSearch) class="form-control"/>
    </div>
    <div style="max-height: 45vh; overflow-y: scroll; overflow-x: hidden; word-break: break-word">
        @if (IsLoaded)
        {
            @foreach (var OVPNUserInfo in FilteredOVPNUserInfos)
            {
                <div class="list-group-item d-flex justify-content-between align-items-start">
                    <div class="ms-2 me-auto">
                        <div class="fw-bold">@OVPNUserInfo.Name (@OVPNUserInfo.ConnectedSince)</div>
                        <p>@OVPNUserInfo.RealAddress</p>
                        <p>Полученный трафик: <MbView Bytes="OVPNUserInfo.BytesReceived"/></p>
                        <p>Отправленный трафик: <MbView Bytes="OVPNUserInfo.BytesSent"/></p>
                    </div>
                </div>
            }
        }
        else
        {
            <p>Загрузка...</p>
        }
      
    </div>
</div>

@code {
    List<OVPNUserInfo> AllOVPNUserInfos = new List<OVPNUserInfo>();
    List<OVPNUserInfo> FilteredOVPNUserInfos = new List<OVPNUserInfo>();
    [Parameter]
    public string TelNetHost { get; set; }
    [Parameter]
    public int TelNetPort { get; set; }

    bool IsLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                IsLoaded = false;
                var telnet = await TelnetWrapper.CreateConnection(TelNetHost, TelNetPort);
                using (telnet)
                {
                    if (!telnet.IsConnected) return;
                    var statusResponse = await OVPNTelnet.GetStatusResponse(telnet);
                    var parsed = OVPNParser.ParseStatus(statusResponse);
                    AllOVPNUserInfos = parsed;
                    FilteredOVPNUserInfos = AllOVPNUserInfos;
                    IsLoaded = true;
                    StateHasChanged();
                    telnet.Dispose();
                }
            }
            catch (Exception)
            {
            }

        }
        
    }

    private void ProcessSearch(ChangeEventArgs args)
    {
        FilteredOVPNUserInfos = AllOVPNUserInfos.Where(ovpnUserInfo => ovpnUserInfo.Name.Contains(args.Value?.ToString() ?? "")).ToList();
        StateHasChanged();
    }
}